syntax = "proto2";
//inspired by Mesos:
//https://github.com/apache/mesos/blob/master/src/messages/messages.proto
//https://github.com/apache/mesos/blob/master/include/mesos/mesos.proto

message WrapperMessage {
  // required string type = 1;
  oneof msg {
    PingAgentMessage ping = 2;
    PongAgentMessage pong = 3;
    RunTaskMessage run_task = 4;
    KillTaskMessage kill_task = 5;
    ResourceOfferMessage offermsg = 6;
    ResourceRequestMessage request = 7;
  }
}

/**
 * Used to register and/or update the master.
 *
 * This message is periodically sent by the agent to the master.
 */
message PingAgentMessage {
  required AgentInfo agent = 1;
  repeated TaskInfo tasks = 2;
}

/**
 * This message is sent by the master to the agent in response to the
 * `PingAgentMessage`.
 */
message PongAgentMessage {
  required string agent_id = 1;
  optional RunTaskMessage run_task = 2;
  optional KillTaskMessage kill_task = 3;
}



/**
 * Describes a agent. Note that the 'id' field is only available after
 * a agent is registered with the master, and is made available here
 * to facilitate re-registration.
 */
message AgentInfo {
  // The configured resources at the agent.
  repeated Resource resources = 1;

  // Attributes associated with the agent.
  repeated Attribute attributes = 2;

  // The Agent's ID
  optional string id = 3;

  // A semantic descriptor for the agent
  optional string name = 4;

  //Ping rate in milliseconds, defaults to 5s
  optional int32 ping_rate = 5; 
}

/**
 * Describes a resource from a resource provider. The `name` field is
 * a string like "cpus" or "mem" that indicates which kind of resource
 * this is; the rest of the fields describe the properties of the
 * resource. A resource can take on one of three types: scalar
 * (double), a list of finite and discrete ranges (e.g., [1-10,
 * 20-30]), or a set of items. A resource is described using the
 * standard protocol buffer "union" trick.
 *
 * Note that "disk" and "mem" resources are scalar values expressed in
 * megabytes. Fractional "cpus" values are allowed (e.g., "0.5"),
 * which correspond to partial shares of a CPU.
 */
message Resource {
  required string name = 1;
  required Value.Type type = 2;
  optional Value.Scalar scalar = 3;
  optional Value.Ranges ranges = 4;
  optional Value.Set set = 5;
  optional Value.Text text = 7;
  optional Value.Device device = 8;

  // If this is set, resource can be shared, i.e. multiple tasks
  // can be launched using this resource and all of them shall refer
  // to the same physical resource on the cluster. 
  //
  // NOTE: Different shared resources must be uniquely identifiable.
  optional bool shared = 6;
}
/**
 * Describes an attribute that can be set on a machine. For now,
 * attributes and resources share the same "value" type, but this may
 * change in the future and attributes may only be string based.
 */
message Attribute {
  required string name = 1;
  required Value.Type type = 2;
  optional Value.Scalar scalar = 3;
  optional Value.Ranges ranges = 4;
  optional Value.Set set = 6;
  optional Value.Text text = 5;
}

/**
 * Describes an Attribute or Resource "value". A value is described
 * using the standard protocol buffer "union" trick.
 */
message Value {
  enum Type {
    SCALAR = 0;
    RANGES = 1;
    SET = 2;
    TEXT = 3;
    DEVICE = 4;
  }

  message Scalar {
    // Scalar values are represented using floating point. To reduce
    // the chance of unpredictable floating point behavior due to
    // roundoff error, we only support three decimal digits of
    // precision for scalar resource values. That is, floating point
    // values are converted to a fixed point format that supports
    // three decimal digits of precision, and then converted back to
    // floating point on output. Any additional precision in scalar
    // resource values is discarded (via rounding).
    required double value = 1;
  }

  message Range {
    required uint64 begin = 1;
    required uint64 end = 2;
  }

  message Ranges {
    repeated Range range = 1;
  }

  message Set {
    repeated string item = 1;
  }

  message Text {
    required string value = 1;
  }

  message Device {
    required string device = 1;
  }

  required Type type = 1;
  optional Scalar scalar = 2;
  optional Ranges ranges = 3;
  optional Set set = 4;
  optional Text text = 5;
  optional Device device = 6;
}

/**
 * This part of the proto will specify the minimal info needed to launch a task with a docker container
 *
 */
message ContainerInfo {

  enum Type {
    DOCKER = 1;
    WASM = 2;
  }

  message DockerInfo {
   // The docker image that is going to be passed to the registry.
    required string image = 1;

    // Network options.
    enum Network {
      HOST = 1;
      BRIDGE = 2;
      NONE = 3;
      USER = 4;
    }

    optional Network network = 2 [default = HOST];

    message PortMapping {
      required uint32 host_port = 1;
      required uint32 container_port = 2;
      // Protocol to expose as (ie: tcp, udp).
      optional string protocol = 3;
    }

    repeated PortMapping port_mappings = 3;

    // With this flag set to true, the docker containerizer will
    // pull the docker image from the registry even if the image
    // is already downloaded on the agent.
    optional bool force_pull_image = 6;
   
    // Environment variables to set in docker
    // Each string of the form "ENV=xxx"
    repeated string environment_variables = 7;
  }

  message WASMInfo {
    //TODO fill out WASMInfo for how to launch a wasm task.
    required string empty = 1; 
  }

  required Type type = 1;
  //repeated Volume volumes = 2;
  //optional string hostname = 4;

  // At most one of the following *Info messages should be set to match
  // the type, i.e. the "protobuf union" in ContainerInfo should be valid.
  optional DockerInfo docker = 3;
  optional WASMInfo wasm = 5;

  /*// A list of network requests. A framework can request multiple IP addresses
  // for the container.
  repeated NetworkInfo network_infos = 7;


  // If specified a tty will be attached to the container entrypoint.
  optional TTYInfo tty_info = 10;*/
}

message FrameworkInfo {
  required string name = 2;
  optional string framework_id = 3;
  // There are more fields but they are mainly useful for how the master
  // Interacts with the framework scheduler, so for now we are going to forget them.
}

message TaskInfo {
  required string name = 1;
  required string task_id = 2;
  required string agent_id = 3;
  repeated Resource resources = 4;
  required FrameworkInfo framework = 5;

  // In Mesos there is an idea of an executor that manages multiple tasks
  // For now I propose that we don't worry about the performance benefits that would allow
  // and instead we just launch tasks with different runtimes.
  // So to specify a task you must specify its runtime  (docker, wasm) and it's code (docker container, wasm binary)
  // It's likely in the future we will need to support the executor/task split to support existing frameworks that expect to run many tiny tasks in a managed way.

  required ContainerInfo container = 9;

  enum TaskState {
    COMPLETED = 0;
    ERRORED = 1;
    RUNNING = 2;
    ISSUED = 3;
    UNISSUED = 4;
    STARTING = 5;
    KILLED = 6;
  }

  optional TaskState state = 6;
  optional string error_message = 7;
}

// Run task message is sent from scheduler to master to agent to launch a task as requested by a framework
message RunTaskMessage {
  required TaskInfo task = 4;
  //required bool launch_executor = 6;
}

// Message is sent from scheduler to master to agent to stop a task as requested by a framework
message KillTaskMessage {
  required string name = 1;
  required string task_id = 2;
  required string agent_id = 3;
  required FrameworkInfo framework = 4;
}

//=====================================
//=====================================
//==========Resource Offering==========
//=====================================
//=====================================

/**
 * Describes some resources available on a agent. An offer only
 * contains resources from a single agent.
 */
message ResourceRequestMessage {
  required string framework_id = 1;
}
message ResourceOfferMessage {
  required string framework_id = 1;
  repeated Offer offers = 2;
}
message Offer {
  required string id = 1;
  required string framework_id = 2;
  required string agent_id = 3;

  repeated Resource resources = 5;
  repeated Attribute attributes = 7;
}
message OfferID {
  required string value = 1;
}
