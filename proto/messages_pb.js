// source: messages.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Attribute', null, global);
goog.exportSymbol('proto.PingSlaveMessage', null, global);
goog.exportSymbol('proto.PongSlaveMessage', null, global);
goog.exportSymbol('proto.RegisterSlaveMessage', null, global);
goog.exportSymbol('proto.Resource', null, global);
goog.exportSymbol('proto.SlaveID', null, global);
goog.exportSymbol('proto.SlaveInfo', null, global);
goog.exportSymbol('proto.SlaveRegisteredMessage', null, global);
goog.exportSymbol('proto.Value', null, global);
goog.exportSymbol('proto.Value.Range', null, global);
goog.exportSymbol('proto.Value.Ranges', null, global);
goog.exportSymbol('proto.Value.Scalar', null, global);
goog.exportSymbol('proto.Value.Set', null, global);
goog.exportSymbol('proto.Value.Text', null, global);
goog.exportSymbol('proto.Value.Type', null, global);
goog.exportSymbol('proto.WrapperMessage', null, global);
goog.exportSymbol('proto.WrapperMessage.MsgCase', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.WrapperMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.WrapperMessage.oneofGroups_);
};
goog.inherits(proto.WrapperMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.WrapperMessage.displayName = 'proto.WrapperMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SlaveID = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SlaveID, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SlaveID.displayName = 'proto.SlaveID';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SlaveRegisteredMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SlaveRegisteredMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SlaveRegisteredMessage.displayName = 'proto.SlaveRegisteredMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PingSlaveMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PingSlaveMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PingSlaveMessage.displayName = 'proto.PingSlaveMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PongSlaveMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PongSlaveMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.PongSlaveMessage.displayName = 'proto.PongSlaveMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Attribute = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Attribute, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Attribute.displayName = 'proto.Attribute';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SlaveInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SlaveInfo.repeatedFields_, null);
};
goog.inherits(proto.SlaveInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.SlaveInfo.displayName = 'proto.SlaveInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RegisterSlaveMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RegisterSlaveMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.RegisterSlaveMessage.displayName = 'proto.RegisterSlaveMessage';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Resource = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Resource, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Resource.displayName = 'proto.Resource';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Value = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Value, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Value.displayName = 'proto.Value';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Value.Scalar = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Value.Scalar, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Value.Scalar.displayName = 'proto.Value.Scalar';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Value.Range = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Value.Range, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Value.Range.displayName = 'proto.Value.Range';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Value.Ranges = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Value.Ranges.repeatedFields_, null);
};
goog.inherits(proto.Value.Ranges, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Value.Ranges.displayName = 'proto.Value.Ranges';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Value.Set = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Value.Set.repeatedFields_, null);
};
goog.inherits(proto.Value.Set, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Value.Set.displayName = 'proto.Value.Set';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Value.Text = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Value.Text, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.Value.Text.displayName = 'proto.Value.Text';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.WrapperMessage.oneofGroups_ = [[2,3,4,5]];

/**
 * @enum {number}
 */
proto.WrapperMessage.MsgCase = {
  MSG_NOT_SET: 0,
  REGISTER_SLAVE: 2,
  SLAVE_REGISTERED: 3,
  PING: 4,
  PONG: 5
};

/**
 * @return {proto.WrapperMessage.MsgCase}
 */
proto.WrapperMessage.prototype.getMsgCase = function() {
  return /** @type {proto.WrapperMessage.MsgCase} */(jspb.Message.computeOneofCase(this, proto.WrapperMessage.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.WrapperMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.WrapperMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.WrapperMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WrapperMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    registerSlave: (f = msg.getRegisterSlave()) && proto.RegisterSlaveMessage.toObject(includeInstance, f),
    slaveRegistered: (f = msg.getSlaveRegistered()) && proto.SlaveRegisteredMessage.toObject(includeInstance, f),
    ping: (f = msg.getPing()) && proto.PingSlaveMessage.toObject(includeInstance, f),
    pong: (f = msg.getPong()) && proto.PongSlaveMessage.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.WrapperMessage}
 */
proto.WrapperMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.WrapperMessage;
  return proto.WrapperMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.WrapperMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.WrapperMessage}
 */
proto.WrapperMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 2:
      var value = new proto.RegisterSlaveMessage;
      reader.readMessage(value,proto.RegisterSlaveMessage.deserializeBinaryFromReader);
      msg.setRegisterSlave(value);
      break;
    case 3:
      var value = new proto.SlaveRegisteredMessage;
      reader.readMessage(value,proto.SlaveRegisteredMessage.deserializeBinaryFromReader);
      msg.setSlaveRegistered(value);
      break;
    case 4:
      var value = new proto.PingSlaveMessage;
      reader.readMessage(value,proto.PingSlaveMessage.deserializeBinaryFromReader);
      msg.setPing(value);
      break;
    case 5:
      var value = new proto.PongSlaveMessage;
      reader.readMessage(value,proto.PongSlaveMessage.deserializeBinaryFromReader);
      msg.setPong(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.WrapperMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.WrapperMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.WrapperMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.WrapperMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegisterSlave();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.RegisterSlaveMessage.serializeBinaryToWriter
    );
  }
  f = message.getSlaveRegistered();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SlaveRegisteredMessage.serializeBinaryToWriter
    );
  }
  f = message.getPing();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.PingSlaveMessage.serializeBinaryToWriter
    );
  }
  f = message.getPong();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.PongSlaveMessage.serializeBinaryToWriter
    );
  }
};


/**
 * optional RegisterSlaveMessage register_slave = 2;
 * @return {?proto.RegisterSlaveMessage}
 */
proto.WrapperMessage.prototype.getRegisterSlave = function() {
  return /** @type{?proto.RegisterSlaveMessage} */ (
    jspb.Message.getWrapperField(this, proto.RegisterSlaveMessage, 2));
};


/**
 * @param {?proto.RegisterSlaveMessage|undefined} value
 * @return {!proto.WrapperMessage} returns this
*/
proto.WrapperMessage.prototype.setRegisterSlave = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.WrapperMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WrapperMessage} returns this
 */
proto.WrapperMessage.prototype.clearRegisterSlave = function() {
  return this.setRegisterSlave(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WrapperMessage.prototype.hasRegisterSlave = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SlaveRegisteredMessage slave_registered = 3;
 * @return {?proto.SlaveRegisteredMessage}
 */
proto.WrapperMessage.prototype.getSlaveRegistered = function() {
  return /** @type{?proto.SlaveRegisteredMessage} */ (
    jspb.Message.getWrapperField(this, proto.SlaveRegisteredMessage, 3));
};


/**
 * @param {?proto.SlaveRegisteredMessage|undefined} value
 * @return {!proto.WrapperMessage} returns this
*/
proto.WrapperMessage.prototype.setSlaveRegistered = function(value) {
  return jspb.Message.setOneofWrapperField(this, 3, proto.WrapperMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WrapperMessage} returns this
 */
proto.WrapperMessage.prototype.clearSlaveRegistered = function() {
  return this.setSlaveRegistered(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WrapperMessage.prototype.hasSlaveRegistered = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional PingSlaveMessage ping = 4;
 * @return {?proto.PingSlaveMessage}
 */
proto.WrapperMessage.prototype.getPing = function() {
  return /** @type{?proto.PingSlaveMessage} */ (
    jspb.Message.getWrapperField(this, proto.PingSlaveMessage, 4));
};


/**
 * @param {?proto.PingSlaveMessage|undefined} value
 * @return {!proto.WrapperMessage} returns this
*/
proto.WrapperMessage.prototype.setPing = function(value) {
  return jspb.Message.setOneofWrapperField(this, 4, proto.WrapperMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WrapperMessage} returns this
 */
proto.WrapperMessage.prototype.clearPing = function() {
  return this.setPing(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WrapperMessage.prototype.hasPing = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional PongSlaveMessage pong = 5;
 * @return {?proto.PongSlaveMessage}
 */
proto.WrapperMessage.prototype.getPong = function() {
  return /** @type{?proto.PongSlaveMessage} */ (
    jspb.Message.getWrapperField(this, proto.PongSlaveMessage, 5));
};


/**
 * @param {?proto.PongSlaveMessage|undefined} value
 * @return {!proto.WrapperMessage} returns this
*/
proto.WrapperMessage.prototype.setPong = function(value) {
  return jspb.Message.setOneofWrapperField(this, 5, proto.WrapperMessage.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.WrapperMessage} returns this
 */
proto.WrapperMessage.prototype.clearPong = function() {
  return this.setPong(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.WrapperMessage.prototype.hasPong = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SlaveID.prototype.toObject = function(opt_includeInstance) {
  return proto.SlaveID.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SlaveID} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SlaveID.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SlaveID}
 */
proto.SlaveID.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SlaveID;
  return proto.SlaveID.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SlaveID} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SlaveID}
 */
proto.SlaveID.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SlaveID.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SlaveID.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SlaveID} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SlaveID.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string value = 1;
 * @return {string}
 */
proto.SlaveID.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.SlaveID} returns this
 */
proto.SlaveID.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.SlaveID} returns this
 */
proto.SlaveID.prototype.clearValue = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SlaveID.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SlaveRegisteredMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.SlaveRegisteredMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SlaveRegisteredMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SlaveRegisteredMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    slaveId: (f = msg.getSlaveId()) && proto.SlaveID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SlaveRegisteredMessage}
 */
proto.SlaveRegisteredMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SlaveRegisteredMessage;
  return proto.SlaveRegisteredMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SlaveRegisteredMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SlaveRegisteredMessage}
 */
proto.SlaveRegisteredMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SlaveID;
      reader.readMessage(value,proto.SlaveID.deserializeBinaryFromReader);
      msg.setSlaveId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SlaveRegisteredMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SlaveRegisteredMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SlaveRegisteredMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SlaveRegisteredMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlaveId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SlaveID.serializeBinaryToWriter
    );
  }
};


/**
 * required SlaveID slave_id = 1;
 * @return {!proto.SlaveID}
 */
proto.SlaveRegisteredMessage.prototype.getSlaveId = function() {
  return /** @type{!proto.SlaveID} */ (
    jspb.Message.getWrapperField(this, proto.SlaveID, 1, 1));
};


/**
 * @param {!proto.SlaveID} value
 * @return {!proto.SlaveRegisteredMessage} returns this
*/
proto.SlaveRegisteredMessage.prototype.setSlaveId = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.SlaveRegisteredMessage} returns this
 */
proto.SlaveRegisteredMessage.prototype.clearSlaveId = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SlaveRegisteredMessage.prototype.hasSlaveId = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PingSlaveMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.PingSlaveMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PingSlaveMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PingSlaveMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    connected: (f = jspb.Message.getBooleanField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PingSlaveMessage}
 */
proto.PingSlaveMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PingSlaveMessage;
  return proto.PingSlaveMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PingSlaveMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PingSlaveMessage}
 */
proto.PingSlaveMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setConnected(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PingSlaveMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PingSlaveMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PingSlaveMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PingSlaveMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {boolean} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * required bool connected = 1;
 * @return {boolean}
 */
proto.PingSlaveMessage.prototype.getConnected = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.PingSlaveMessage} returns this
 */
proto.PingSlaveMessage.prototype.setConnected = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.PingSlaveMessage} returns this
 */
proto.PingSlaveMessage.prototype.clearConnected = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.PingSlaveMessage.prototype.hasConnected = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PongSlaveMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.PongSlaveMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PongSlaveMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PongSlaveMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PongSlaveMessage}
 */
proto.PongSlaveMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PongSlaveMessage;
  return proto.PongSlaveMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PongSlaveMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PongSlaveMessage}
 */
proto.PongSlaveMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PongSlaveMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PongSlaveMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PongSlaveMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PongSlaveMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Attribute.prototype.toObject = function(opt_includeInstance) {
  return proto.Attribute.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Attribute} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Attribute.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    scalar: (f = msg.getScalar()) && proto.Value.Scalar.toObject(includeInstance, f),
    ranges: (f = msg.getRanges()) && proto.Value.Ranges.toObject(includeInstance, f),
    set: (f = msg.getSet()) && proto.Value.Set.toObject(includeInstance, f),
    text: (f = msg.getText()) && proto.Value.Text.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Attribute}
 */
proto.Attribute.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Attribute;
  return proto.Attribute.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Attribute} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Attribute}
 */
proto.Attribute.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.Value.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.Value.Scalar;
      reader.readMessage(value,proto.Value.Scalar.deserializeBinaryFromReader);
      msg.setScalar(value);
      break;
    case 4:
      var value = new proto.Value.Ranges;
      reader.readMessage(value,proto.Value.Ranges.deserializeBinaryFromReader);
      msg.setRanges(value);
      break;
    case 6:
      var value = new proto.Value.Set;
      reader.readMessage(value,proto.Value.Set.deserializeBinaryFromReader);
      msg.setSet(value);
      break;
    case 5:
      var value = new proto.Value.Text;
      reader.readMessage(value,proto.Value.Text.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Attribute.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Attribute.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Attribute} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Attribute.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.Value.Type} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getScalar();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Value.Scalar.serializeBinaryToWriter
    );
  }
  f = message.getRanges();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Value.Ranges.serializeBinaryToWriter
    );
  }
  f = message.getSet();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.Value.Set.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Value.Text.serializeBinaryToWriter
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.Attribute.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Attribute} returns this
 */
proto.Attribute.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Attribute} returns this
 */
proto.Attribute.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Attribute.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Value.Type type = 2;
 * @return {!proto.Value.Type}
 */
proto.Attribute.prototype.getType = function() {
  return /** @type {!proto.Value.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Value.Type} value
 * @return {!proto.Attribute} returns this
 */
proto.Attribute.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Attribute} returns this
 */
proto.Attribute.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Attribute.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Value.Scalar scalar = 3;
 * @return {?proto.Value.Scalar}
 */
proto.Attribute.prototype.getScalar = function() {
  return /** @type{?proto.Value.Scalar} */ (
    jspb.Message.getWrapperField(this, proto.Value.Scalar, 3));
};


/**
 * @param {?proto.Value.Scalar|undefined} value
 * @return {!proto.Attribute} returns this
*/
proto.Attribute.prototype.setScalar = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Attribute} returns this
 */
proto.Attribute.prototype.clearScalar = function() {
  return this.setScalar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Attribute.prototype.hasScalar = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Value.Ranges ranges = 4;
 * @return {?proto.Value.Ranges}
 */
proto.Attribute.prototype.getRanges = function() {
  return /** @type{?proto.Value.Ranges} */ (
    jspb.Message.getWrapperField(this, proto.Value.Ranges, 4));
};


/**
 * @param {?proto.Value.Ranges|undefined} value
 * @return {!proto.Attribute} returns this
*/
proto.Attribute.prototype.setRanges = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Attribute} returns this
 */
proto.Attribute.prototype.clearRanges = function() {
  return this.setRanges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Attribute.prototype.hasRanges = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Value.Set set = 6;
 * @return {?proto.Value.Set}
 */
proto.Attribute.prototype.getSet = function() {
  return /** @type{?proto.Value.Set} */ (
    jspb.Message.getWrapperField(this, proto.Value.Set, 6));
};


/**
 * @param {?proto.Value.Set|undefined} value
 * @return {!proto.Attribute} returns this
*/
proto.Attribute.prototype.setSet = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Attribute} returns this
 */
proto.Attribute.prototype.clearSet = function() {
  return this.setSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Attribute.prototype.hasSet = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional Value.Text text = 5;
 * @return {?proto.Value.Text}
 */
proto.Attribute.prototype.getText = function() {
  return /** @type{?proto.Value.Text} */ (
    jspb.Message.getWrapperField(this, proto.Value.Text, 5));
};


/**
 * @param {?proto.Value.Text|undefined} value
 * @return {!proto.Attribute} returns this
*/
proto.Attribute.prototype.setText = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Attribute} returns this
 */
proto.Attribute.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Attribute.prototype.hasText = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SlaveInfo.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SlaveInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.SlaveInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SlaveInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SlaveInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourcesList: jspb.Message.toObjectList(msg.getResourcesList(),
    proto.Resource.toObject, includeInstance),
    attributesList: jspb.Message.toObjectList(msg.getAttributesList(),
    proto.Attribute.toObject, includeInstance),
    id: (f = msg.getId()) && proto.SlaveID.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SlaveInfo}
 */
proto.SlaveInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SlaveInfo;
  return proto.SlaveInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SlaveInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SlaveInfo}
 */
proto.SlaveInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Resource;
      reader.readMessage(value,proto.Resource.deserializeBinaryFromReader);
      msg.addResources(value);
      break;
    case 2:
      var value = new proto.Attribute;
      reader.readMessage(value,proto.Attribute.deserializeBinaryFromReader);
      msg.addAttributes(value);
      break;
    case 3:
      var value = new proto.SlaveID;
      reader.readMessage(value,proto.SlaveID.deserializeBinaryFromReader);
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SlaveInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SlaveInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SlaveInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SlaveInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourcesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Resource.serializeBinaryToWriter
    );
  }
  f = message.getAttributesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.Attribute.serializeBinaryToWriter
    );
  }
  f = message.getId();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.SlaveID.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Resource resources = 1;
 * @return {!Array<!proto.Resource>}
 */
proto.SlaveInfo.prototype.getResourcesList = function() {
  return /** @type{!Array<!proto.Resource>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Resource, 1));
};


/**
 * @param {!Array<!proto.Resource>} value
 * @return {!proto.SlaveInfo} returns this
*/
proto.SlaveInfo.prototype.setResourcesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Resource=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Resource}
 */
proto.SlaveInfo.prototype.addResources = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Resource, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SlaveInfo} returns this
 */
proto.SlaveInfo.prototype.clearResourcesList = function() {
  return this.setResourcesList([]);
};


/**
 * repeated Attribute attributes = 2;
 * @return {!Array<!proto.Attribute>}
 */
proto.SlaveInfo.prototype.getAttributesList = function() {
  return /** @type{!Array<!proto.Attribute>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Attribute, 2));
};


/**
 * @param {!Array<!proto.Attribute>} value
 * @return {!proto.SlaveInfo} returns this
*/
proto.SlaveInfo.prototype.setAttributesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.Attribute=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Attribute}
 */
proto.SlaveInfo.prototype.addAttributes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.Attribute, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.SlaveInfo} returns this
 */
proto.SlaveInfo.prototype.clearAttributesList = function() {
  return this.setAttributesList([]);
};


/**
 * optional SlaveID id = 3;
 * @return {?proto.SlaveID}
 */
proto.SlaveInfo.prototype.getId = function() {
  return /** @type{?proto.SlaveID} */ (
    jspb.Message.getWrapperField(this, proto.SlaveID, 3));
};


/**
 * @param {?proto.SlaveID|undefined} value
 * @return {!proto.SlaveInfo} returns this
*/
proto.SlaveInfo.prototype.setId = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.SlaveInfo} returns this
 */
proto.SlaveInfo.prototype.clearId = function() {
  return this.setId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.SlaveInfo.prototype.hasId = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RegisterSlaveMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.RegisterSlaveMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RegisterSlaveMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegisterSlaveMessage.toObject = function(includeInstance, msg) {
  var f, obj = {
    slave: (f = msg.getSlave()) && proto.SlaveInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RegisterSlaveMessage}
 */
proto.RegisterSlaveMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RegisterSlaveMessage;
  return proto.RegisterSlaveMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RegisterSlaveMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RegisterSlaveMessage}
 */
proto.RegisterSlaveMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SlaveInfo;
      reader.readMessage(value,proto.SlaveInfo.deserializeBinaryFromReader);
      msg.setSlave(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RegisterSlaveMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RegisterSlaveMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RegisterSlaveMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RegisterSlaveMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlave();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SlaveInfo.serializeBinaryToWriter
    );
  }
};


/**
 * required SlaveInfo slave = 1;
 * @return {!proto.SlaveInfo}
 */
proto.RegisterSlaveMessage.prototype.getSlave = function() {
  return /** @type{!proto.SlaveInfo} */ (
    jspb.Message.getWrapperField(this, proto.SlaveInfo, 1, 1));
};


/**
 * @param {!proto.SlaveInfo} value
 * @return {!proto.RegisterSlaveMessage} returns this
*/
proto.RegisterSlaveMessage.prototype.setSlave = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.RegisterSlaveMessage} returns this
 */
proto.RegisterSlaveMessage.prototype.clearSlave = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.RegisterSlaveMessage.prototype.hasSlave = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Resource.prototype.toObject = function(opt_includeInstance) {
  return proto.Resource.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Resource} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Resource.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    type: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f,
    scalar: (f = msg.getScalar()) && proto.Value.Scalar.toObject(includeInstance, f),
    ranges: (f = msg.getRanges()) && proto.Value.Ranges.toObject(includeInstance, f),
    set: (f = msg.getSet()) && proto.Value.Set.toObject(includeInstance, f),
    shared: (f = jspb.Message.getBooleanField(msg, 6)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Resource}
 */
proto.Resource.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Resource;
  return proto.Resource.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Resource} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Resource}
 */
proto.Resource.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.Value.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.Value.Scalar;
      reader.readMessage(value,proto.Value.Scalar.deserializeBinaryFromReader);
      msg.setScalar(value);
      break;
    case 4:
      var value = new proto.Value.Ranges;
      reader.readMessage(value,proto.Value.Ranges.deserializeBinaryFromReader);
      msg.setRanges(value);
      break;
    case 5:
      var value = new proto.Value.Set;
      reader.readMessage(value,proto.Value.Set.deserializeBinaryFromReader);
      msg.setSet(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setShared(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Resource.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Resource.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Resource} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Resource.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {!proto.Value.Type} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getScalar();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Value.Scalar.serializeBinaryToWriter
    );
  }
  f = message.getRanges();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Value.Ranges.serializeBinaryToWriter
    );
  }
  f = message.getSet();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Value.Set.serializeBinaryToWriter
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.Resource.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Resource} returns this
 */
proto.Resource.prototype.setName = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Resource} returns this
 */
proto.Resource.prototype.clearName = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Resource.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Value.Type type = 2;
 * @return {!proto.Value.Type}
 */
proto.Resource.prototype.getType = function() {
  return /** @type {!proto.Value.Type} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.Value.Type} value
 * @return {!proto.Resource} returns this
 */
proto.Resource.prototype.setType = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Resource} returns this
 */
proto.Resource.prototype.clearType = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Resource.prototype.hasType = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Value.Scalar scalar = 3;
 * @return {?proto.Value.Scalar}
 */
proto.Resource.prototype.getScalar = function() {
  return /** @type{?proto.Value.Scalar} */ (
    jspb.Message.getWrapperField(this, proto.Value.Scalar, 3));
};


/**
 * @param {?proto.Value.Scalar|undefined} value
 * @return {!proto.Resource} returns this
*/
proto.Resource.prototype.setScalar = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Resource} returns this
 */
proto.Resource.prototype.clearScalar = function() {
  return this.setScalar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Resource.prototype.hasScalar = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Value.Ranges ranges = 4;
 * @return {?proto.Value.Ranges}
 */
proto.Resource.prototype.getRanges = function() {
  return /** @type{?proto.Value.Ranges} */ (
    jspb.Message.getWrapperField(this, proto.Value.Ranges, 4));
};


/**
 * @param {?proto.Value.Ranges|undefined} value
 * @return {!proto.Resource} returns this
*/
proto.Resource.prototype.setRanges = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Resource} returns this
 */
proto.Resource.prototype.clearRanges = function() {
  return this.setRanges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Resource.prototype.hasRanges = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Value.Set set = 5;
 * @return {?proto.Value.Set}
 */
proto.Resource.prototype.getSet = function() {
  return /** @type{?proto.Value.Set} */ (
    jspb.Message.getWrapperField(this, proto.Value.Set, 5));
};


/**
 * @param {?proto.Value.Set|undefined} value
 * @return {!proto.Resource} returns this
*/
proto.Resource.prototype.setSet = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Resource} returns this
 */
proto.Resource.prototype.clearSet = function() {
  return this.setSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Resource.prototype.hasSet = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool shared = 6;
 * @return {boolean}
 */
proto.Resource.prototype.getShared = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.Resource} returns this
 */
proto.Resource.prototype.setShared = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Resource} returns this
 */
proto.Resource.prototype.clearShared = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Resource.prototype.hasShared = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Value.prototype.toObject = function(opt_includeInstance) {
  return proto.Value.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Value} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Value.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    scalar: (f = msg.getScalar()) && proto.Value.Scalar.toObject(includeInstance, f),
    ranges: (f = msg.getRanges()) && proto.Value.Ranges.toObject(includeInstance, f),
    set: (f = msg.getSet()) && proto.Value.Set.toObject(includeInstance, f),
    text: (f = msg.getText()) && proto.Value.Text.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Value}
 */
proto.Value.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Value;
  return proto.Value.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Value} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Value}
 */
proto.Value.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.Value.Type} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = new proto.Value.Scalar;
      reader.readMessage(value,proto.Value.Scalar.deserializeBinaryFromReader);
      msg.setScalar(value);
      break;
    case 3:
      var value = new proto.Value.Ranges;
      reader.readMessage(value,proto.Value.Ranges.deserializeBinaryFromReader);
      msg.setRanges(value);
      break;
    case 4:
      var value = new proto.Value.Set;
      reader.readMessage(value,proto.Value.Set.deserializeBinaryFromReader);
      msg.setSet(value);
      break;
    case 5:
      var value = new proto.Value.Text;
      reader.readMessage(value,proto.Value.Text.deserializeBinaryFromReader);
      msg.setText(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Value.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Value.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Value} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Value.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {!proto.Value.Type} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getScalar();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Value.Scalar.serializeBinaryToWriter
    );
  }
  f = message.getRanges();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Value.Ranges.serializeBinaryToWriter
    );
  }
  f = message.getSet();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.Value.Set.serializeBinaryToWriter
    );
  }
  f = message.getText();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.Value.Text.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.Value.Type = {
  SCALAR: 0,
  RANGES: 1,
  SET: 2,
  TEXT: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Value.Scalar.prototype.toObject = function(opt_includeInstance) {
  return proto.Value.Scalar.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Value.Scalar} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Value.Scalar.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = jspb.Message.getOptionalFloatingPointField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Value.Scalar}
 */
proto.Value.Scalar.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Value.Scalar;
  return proto.Value.Scalar.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Value.Scalar} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Value.Scalar}
 */
proto.Value.Scalar.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Value.Scalar.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Value.Scalar.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Value.Scalar} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Value.Scalar.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeDouble(
      1,
      f
    );
  }
};


/**
 * required double value = 1;
 * @return {number}
 */
proto.Value.Scalar.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.Value.Scalar} returns this
 */
proto.Value.Scalar.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Value.Scalar} returns this
 */
proto.Value.Scalar.prototype.clearValue = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Value.Scalar.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Value.Range.prototype.toObject = function(opt_includeInstance) {
  return proto.Value.Range.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Value.Range} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Value.Range.toObject = function(includeInstance, msg) {
  var f, obj = {
    begin: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f,
    end: (f = jspb.Message.getField(msg, 2)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Value.Range}
 */
proto.Value.Range.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Value.Range;
  return proto.Value.Range.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Value.Range} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Value.Range}
 */
proto.Value.Range.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setBegin(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setEnd(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Value.Range.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Value.Range.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Value.Range} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Value.Range.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {number} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * required uint64 begin = 1;
 * @return {number}
 */
proto.Value.Range.prototype.getBegin = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.Value.Range} returns this
 */
proto.Value.Range.prototype.setBegin = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Value.Range} returns this
 */
proto.Value.Range.prototype.clearBegin = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Value.Range.prototype.hasBegin = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required uint64 end = 2;
 * @return {number}
 */
proto.Value.Range.prototype.getEnd = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.Value.Range} returns this
 */
proto.Value.Range.prototype.setEnd = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Value.Range} returns this
 */
proto.Value.Range.prototype.clearEnd = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Value.Range.prototype.hasEnd = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Value.Ranges.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Value.Ranges.prototype.toObject = function(opt_includeInstance) {
  return proto.Value.Ranges.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Value.Ranges} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Value.Ranges.toObject = function(includeInstance, msg) {
  var f, obj = {
    rangeList: jspb.Message.toObjectList(msg.getRangeList(),
    proto.Value.Range.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Value.Ranges}
 */
proto.Value.Ranges.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Value.Ranges;
  return proto.Value.Ranges.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Value.Ranges} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Value.Ranges}
 */
proto.Value.Ranges.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Value.Range;
      reader.readMessage(value,proto.Value.Range.deserializeBinaryFromReader);
      msg.addRange(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Value.Ranges.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Value.Ranges.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Value.Ranges} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Value.Ranges.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRangeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Value.Range.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Range range = 1;
 * @return {!Array<!proto.Value.Range>}
 */
proto.Value.Ranges.prototype.getRangeList = function() {
  return /** @type{!Array<!proto.Value.Range>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Value.Range, 1));
};


/**
 * @param {!Array<!proto.Value.Range>} value
 * @return {!proto.Value.Ranges} returns this
*/
proto.Value.Ranges.prototype.setRangeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Value.Range=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Value.Range}
 */
proto.Value.Ranges.prototype.addRange = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Value.Range, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Value.Ranges} returns this
 */
proto.Value.Ranges.prototype.clearRangeList = function() {
  return this.setRangeList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Value.Set.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Value.Set.prototype.toObject = function(opt_includeInstance) {
  return proto.Value.Set.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Value.Set} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Value.Set.toObject = function(includeInstance, msg) {
  var f, obj = {
    itemList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Value.Set}
 */
proto.Value.Set.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Value.Set;
  return proto.Value.Set.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Value.Set} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Value.Set}
 */
proto.Value.Set.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addItem(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Value.Set.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Value.Set.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Value.Set} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Value.Set.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getItemList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string item = 1;
 * @return {!Array<string>}
 */
proto.Value.Set.prototype.getItemList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.Value.Set} returns this
 */
proto.Value.Set.prototype.setItemList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.Value.Set} returns this
 */
proto.Value.Set.prototype.addItem = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.Value.Set} returns this
 */
proto.Value.Set.prototype.clearItemList = function() {
  return this.setItemList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Value.Text.prototype.toObject = function(opt_includeInstance) {
  return proto.Value.Text.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Value.Text} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Value.Text.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = jspb.Message.getField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Value.Text}
 */
proto.Value.Text.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Value.Text;
  return proto.Value.Text.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Value.Text} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Value.Text}
 */
proto.Value.Text.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Value.Text.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Value.Text.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Value.Text} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Value.Text.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = /** @type {string} */ (jspb.Message.getField(message, 1));
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * required string value = 1;
 * @return {string}
 */
proto.Value.Text.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.Value.Text} returns this
 */
proto.Value.Text.prototype.setValue = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Value.Text} returns this
 */
proto.Value.Text.prototype.clearValue = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Value.Text.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Type type = 1;
 * @return {!proto.Value.Type}
 */
proto.Value.prototype.getType = function() {
  return /** @type {!proto.Value.Type} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {!proto.Value.Type} value
 * @return {!proto.Value} returns this
 */
proto.Value.prototype.setType = function(value) {
  return jspb.Message.setField(this, 1, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.Value} returns this
 */
proto.Value.prototype.clearType = function() {
  return jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Value.prototype.hasType = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Scalar scalar = 2;
 * @return {?proto.Value.Scalar}
 */
proto.Value.prototype.getScalar = function() {
  return /** @type{?proto.Value.Scalar} */ (
    jspb.Message.getWrapperField(this, proto.Value.Scalar, 2));
};


/**
 * @param {?proto.Value.Scalar|undefined} value
 * @return {!proto.Value} returns this
*/
proto.Value.prototype.setScalar = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Value} returns this
 */
proto.Value.prototype.clearScalar = function() {
  return this.setScalar(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Value.prototype.hasScalar = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Ranges ranges = 3;
 * @return {?proto.Value.Ranges}
 */
proto.Value.prototype.getRanges = function() {
  return /** @type{?proto.Value.Ranges} */ (
    jspb.Message.getWrapperField(this, proto.Value.Ranges, 3));
};


/**
 * @param {?proto.Value.Ranges|undefined} value
 * @return {!proto.Value} returns this
*/
proto.Value.prototype.setRanges = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Value} returns this
 */
proto.Value.prototype.clearRanges = function() {
  return this.setRanges(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Value.prototype.hasRanges = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional Set set = 4;
 * @return {?proto.Value.Set}
 */
proto.Value.prototype.getSet = function() {
  return /** @type{?proto.Value.Set} */ (
    jspb.Message.getWrapperField(this, proto.Value.Set, 4));
};


/**
 * @param {?proto.Value.Set|undefined} value
 * @return {!proto.Value} returns this
*/
proto.Value.prototype.setSet = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Value} returns this
 */
proto.Value.prototype.clearSet = function() {
  return this.setSet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Value.prototype.hasSet = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional Text text = 5;
 * @return {?proto.Value.Text}
 */
proto.Value.prototype.getText = function() {
  return /** @type{?proto.Value.Text} */ (
    jspb.Message.getWrapperField(this, proto.Value.Text, 5));
};


/**
 * @param {?proto.Value.Text|undefined} value
 * @return {!proto.Value} returns this
*/
proto.Value.prototype.setText = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.Value} returns this
 */
proto.Value.prototype.clearText = function() {
  return this.setText(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.Value.prototype.hasText = function() {
  return jspb.Message.getField(this, 5) != null;
};


goog.object.extend(exports, proto);
